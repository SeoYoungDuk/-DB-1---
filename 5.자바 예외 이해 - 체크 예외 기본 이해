
CheckedTest {
  //Exception은 상속받은 
  static class MyCheckedException extends Exception {
      public MyCheckedException(String message) {
        super(message);
      }
  }
  //Checked 예외는 처리하거나 넘겨야한다.
  static class Service {
    Repository repository = new Repository();
    //예외를 잡아서 처리하는 코드
    public void callCatch() {
      try {
        repostiory.call();
      } catch (MyCheckedExcetion e) {
        log.info("예외 처리, message = {}", e.getMesseage());
      }
    }
  // 예외를 밖으로 던지는코드 체크예외는 예외를 잡지않고 밖으로 던지려면 thorws 예외를 필수적으로 달아야한다.
  public void callThrow() throws MyCheckedExcetipn{
      try {
        repostiory.call();
      } catch (MyCheckedExcetion e) {
        log.info("예외 처리, message = {}", e.getMesseage());
      }
    }

  }
  static class Respository {
   public void call() throws MyCheckedException{
    throw new MyCheckedException("ex");
   }  
  }
}

체크 예외의 장단점
장점: 컴파일 오류가 발생하기 때문에, 개발자가 실수로 예외를 누락하지 않을 수 있음.
단점 : 크게 신경쓰고 싶지 않은 일까지 모두다 신경 써야함. 의존관계에 따른 단점이 있음.
