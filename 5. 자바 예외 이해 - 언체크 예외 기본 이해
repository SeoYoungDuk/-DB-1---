언체크 예외는

public class UncheckedTest {
  //RuntimeException을 상속받은 exception은 자동으로 언체크 예외 이다.
  static class MyUncheckedException extends RuntimeException {
    public MyUnCheckedException(String message) {
      super(message);
    }
  }
  //unchecked 예외는 외를 잡거나 던지지 않아도 된다.
  // 예외를 잡지 않으면 자동으로 밖으로 던진다.

  static class Service {
    void callCatchThrow() {
      try {
        repsitory.call();
      } catch (MyUncheckedExcetion e) {
        log.info("예외 로직", e);
      }
    }
    //예외를 잡지 않으면 자연스럽게 상위로 넘어간다
    public void callThrow() {
      repository.call();
    }
  }
  
  static class Repository {
    public void call() {
      throw new MyUncheckedExcetion();
    }
  }
}

언체크 예외의 장단점 

장점 : 신경 쓰지 않고 싶은 예외들을 다 무시 가능함, 신경쓰고 싶지 않은 예외의 의존관계를 참조하지 않아도 되는 장점이 있다.
단점 : 실수로 예외를 누락할수 있다.

필수로 선언해야하는가 안해야하는가 차이다.
